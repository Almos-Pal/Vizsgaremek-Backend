// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// USER TABLE
model User {
  user_id     Int       @id @default(autoincrement())
  username    String
  email       String @unique
  password    String
  gyakorlatok User_Gyakorlat[]
  edzestervek Edzesterv[]
  edzesek     Edzes[]

  @@map("user")
}

// EDZÉSTERV TABLE
model Edzesterv {
  edzesterv_id   Int       @id @default(autoincrement())
  edzesterv_neve String
  napokszama     Int
  user_id        Int
  user           User      @relation(fields: [user_id], references: [user_id]) // Many-to-one relationship to User
  edzesek        Edzesterv_Edzes[] // Many-to-many relationship to Edzes

  @@map("edzesterv")
}

// EDZÉS TABLE
model Edzes {
  edzes_id       Int                 @id @default(autoincrement())
  edzes_neve     String
  datum          DateTime
  user_id        Int?
  ido            Int
  user           User?               @relation(fields: [user_id], references: [user_id]) // Many-to-one relationship to User
  edzestervek    Edzesterv_Edzes[]   // Many-to-many relationship to Edzesterv
  gyakorlatok    Edzes_Gyakorlat[]   // Many-to-many relationship to Gyakorlat
  cardiok        Edzes_Cardio[]      // Many-to-many relationship to Cardio

  @@map("edzes")
}

//JUNCTION TABLE ARE FOR MANY-TO-MANY RELATIONSHIPS TO MAKE THE CONNECTIONS MORE READABLE AND CLEAR
// EDZÉSTERV-EDZÉS JUNCTION TABLE
model Edzesterv_Edzes {
  edzesterv_id Int
  edzes_id     Int
  edzesterv    Edzesterv @relation(fields: [edzesterv_id], references: [edzesterv_id])
  edzes        Edzes     @relation(fields: [edzes_id], references: [edzes_id])

  @@id([edzesterv_id, edzes_id]) // Composite primary key
}


model User_Gyakorlat {
  user_id     Int
  gyakorlat_id Int
  user        User     @relation(fields: [user_id], references: [user_id])
  gyakorlat    Gyakorlat @relation(fields: [gyakorlat_id], references: [gyakorlat_id])

  @@id([user_id, gyakorlat_id]) // Composite primary key
}

// GYAKORLAT TABLE
model Gyakorlat {
  gyakorlat_id     Int                  @id @default(autoincrement())
  gyakorlat_neve   String
  // personal_best    Float?
  eszkoz           String?
  gyakorlat_leiras String?
  fo_izomcsoport   Int?
  user_id          Int? //optional foreign key for user_id to identify the user who created the exercise
  users            User_Gyakorlat[]              // Many-to-many relationship to User
  sets             Set[]               // One-to-many relationship to Set
  edzesek          Edzes_Gyakorlat[]    // Many-to-many relationship to Edzes
  izomcsoportok    Gyakorlat_Izomcsoport[] // Many-to-many relationship to Izomcsoport

  @@map("gyakorlat")
}

// EDZÉS-GYAKORLAT JUNCTION TABLE
model Edzes_Gyakorlat {
  edzes_id     Int
  gyakorlat_id Int
  edzes        Edzes       @relation(fields: [edzes_id], references: [edzes_id])
  gyakorlat    Gyakorlat   @relation(fields: [gyakorlat_id], references: [gyakorlat_id])

  @@id([edzes_id, gyakorlat_id]) // Composite primary key
}

// IZOMCSOPORT TABLE
model Izomcsoport {
  izomcsoport_id Int                  @id @default(autoincrement())
  nev            String
  gyakorlatok    Gyakorlat_Izomcsoport[] // Many-to-many relationship to Gyakorlat

  @@map("izomcsoport")
}


// GYAKORLAT-IZOMCSOPORT JUNCTION TABLE
model Gyakorlat_Izomcsoport {
  gyakorlat_id    Int
  izomcsoport_id  Int
  gyakorlat       Gyakorlat      @relation(fields: [gyakorlat_id], references: [gyakorlat_id])
  izomcsoport     Izomcsoport    @relation(fields: [izomcsoport_id], references: [izomcsoport_id])

  @@id([gyakorlat_id, izomcsoport_id]) // Composite primary key
}


// SET TABLE
model Set {
  set_id       Int        @id @default(autoincrement())
  ismetles     Int
  suly         Float
  gyakorlat_id Int
  gyakorlat    Gyakorlat  @relation(fields: [gyakorlat_id], references: [gyakorlat_id]) // Many-to-one relationship to Gyakorlat

  @@map("set")
}


// CARDIO TABLE
model Cardio {
  cardio_id    Int            @id @default(autoincrement())
  kardio_tipusa String
  kaloria      Int?
  ido          Int
  edzesek      Edzes_Cardio[]  // Many-to-many relationship to Edzes

  @@map("cardio")
}

// EDZÉS-CARDIO JUNCTION TABLE
model Edzes_Cardio {
  edzes_id  Int
  cardio_id Int
  edzes     Edzes   @relation(fields: [edzes_id], references: [edzes_id])
  cardio    Cardio  @relation(fields: [cardio_id], references: [cardio_id])

  @@id([edzes_id, cardio_id]) // Composite primary key
}
